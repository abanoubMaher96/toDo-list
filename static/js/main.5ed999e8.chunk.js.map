{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","name","listItems","adding","e","preventDefault","target","in","value","_this","setState","concat","Object","toConsumableArray","typing","delete","i","splice","empty","react_default","a","createElement","notEmpty","className","map","x","key","Math","random","onClick","length","this","onSubmit","id","type","placeholder","onChange","Component","App","src_components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PA+EeA,oNA3EXC,MAAO,CACHC,KAAM,GACNC,UAAU,CACN,eAIRC,OAAS,SAACC,GACPA,EAAEC,iBACuB,KAAtBD,EAAEE,OAAOC,GAAGC,OACfC,EAAKC,SAAS,CACTR,UAAS,GAAAS,OAAAC,OAAAC,EAAA,EAAAD,CAAOH,EAAKT,MAAME,WAAlB,CAA6BO,EAAKT,MAAMC,OACjDA,KAAM,QAKda,OAAS,SAACV,GACNK,EAAKC,SAAS,CACVT,KAAKG,EAAEE,OAAOE,WAKtBO,OAAS,SAACC,GAAK,IACPd,EAAaO,EAAKT,MAAlBE,UACLA,EAAUe,OAAOD,EAAE,GACnBP,EAAKC,SAAS,CAACR,iBAGlBgB,MAAO,kBAAMC,EAAAC,EAAAC,cAAA,0BAEbC,SAAW,WACR,OACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wCAETd,EAAKT,MAAME,UAAUsB,IAAI,SAACC,EAAIT,GAC9B,OACGG,EAAAC,EAAAC,cAAA,KAAGK,IAAmB,GAAdC,KAAKC,UAEPH,EACNN,EAAAC,EAAAC,cAAA,QAAME,UAAU,UAAYM,QAAS,kBAAMpB,EAAKM,OAAOC,KAAvD,oFAShB,IAAMc,EAASC,KAAK/B,MAAME,UAAU4B,OAEpC,OACIX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,QAAMW,SAAUD,KAAK5B,QACjBgB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oCACXJ,EAAAC,EAAAC,cAAA,SAAOY,GAAG,KACNzB,MAAOuB,KAAK/B,MAAMC,KAClBiC,KAAK,OACLC,YAAY,YACZZ,UAAU,iDACVa,SAAUL,KAAKjB,SAEnBK,EAAAC,EAAAC,cAAA,UACIE,UAAU,4EADd,qBAKRJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BAAgCO,EAASC,KAAKT,WAAYS,KAAKb,iBArEvEmB,oBCWJC,MATf,WAEE,OACEnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACkB,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ed999e8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Form.css';\r\n\r\nclass Form extends Component{\r\n    state= {\r\n        name: '',\r\n        listItems:[\r\n            'Shopping',\r\n        ]\r\n        \r\n    };\r\n    adding = (e) =>{\r\n       e.preventDefault();\r\n       if(e.target.in.value !== \"\"){\r\n       this.setState({\r\n            listItems : [...this.state.listItems, this.state.name],\r\n            name: \"\"\r\n       })\r\n    }\r\n    }\r\n\r\n    typing = (e) =>{\r\n        this.setState({\r\n            name:e.target.value\r\n        })\r\n    }\r\n    \r\n\r\n    delete = (i) =>{\r\n       let {listItems} = this.state\r\n       listItems.splice(i,1);\r\n       this.setState({listItems})\r\n    }\r\n\r\n    empty =() => <p>No message</p>\r\n \r\n    notEmpty = () =>{\r\n       return(\r\n           <div className=\"col-12 col-sm-12 col-md-11 col-lg-10\">\r\n               {\r\n                 this.state.listItems.map((x , i) =>{\r\n                 return  (\r\n                    <p key={Math.random()*10} \r\n                       >\r\n                         {x}  \r\n                    <span className=\"closing\"   onClick={() => this.delete(i)}> X </span> \r\n                    </p>\r\n            ) \r\n        })}\r\n           </div>\r\n       )\r\n    }\r\n\r\nrender(){\r\n    const length = this.state.listItems.length;\r\n    \r\n    return(\r\n        <div className=\"contain\">\r\n            <form onSubmit={this.adding} >\r\n                <div className=\"row justify-content-center group\">\r\n                    <input id=\"in\" \r\n                        value={this.state.name} \r\n                        type=\"text\" \r\n                        placeholder=\" to Do...\" \r\n                        className=\"ToDoInput col-11 col-sm-10 col-md-6 col-lg-5  \"\r\n                        onChange={this.typing}  />\r\n                    \r\n                    <button \r\n                        className=\"add btn btn-danger col-11 col-sm-10 col-md-auto col-lg-auto offset-lg-1 \"\r\n                        >Add to the list</button>\r\n                </div>\r\n            </form>\r\n            <div className=\"row justify-content-center\" >{ length ? this.notEmpty() :this.empty() }</div>\r\n             \r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n \n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}